#! /usr/bin/env python

import numpy as np
import matplotlib.pyplot as plt
import sys, os
sys.path.append("../../BART/modules/transit/scripts/")
import readtransit as rt
import scipy.constants as const
import voigtcomp

"""
This file contains functions used to produce plots of spectra generated by 
the forward modeling tests (f01 - f08).
For plots of comparison test (f09) output, see comparison.py

main() is configured by default to produce these plots for BART. It can 
be re-configured by the user to produce plots for other RT codes by changing 
`odir` and `rdir` at the beginning of main().

Functions:
plotspectrum() is used to plot the entire spectrum produced by Transit.
plotspeczoom() is used to plot a small part of the spectrum.
plotspeciso()  is used to plot the isothermal spectrum with the Planck function 
               overplotted for the isothermal test (f08).
plotspecabun() is used to plot the varying-abundance spectra produced 
               in the abundance test (f04).

Usage:
Run this from the top-level directory (BARTTest/)

Plots made by manually calling the functions will be saved into the 
directory where spectrum.dat file is located unless otherwise specified.
"""

def plotspectrum(fname, geo, wl=True, oname=None, ptitle=True):
    """
    This function produces a plot of the spectrum produced by Transit.
    
    Inputs
    ------
    fname: string. File name of the spectrum file, with directory relative to 
                   BARTTest/.
    geo  : string. Geometry of the produced spectrum.
                   Options: 'transit' or 'eclipse'
    wl   : bool.   True plots over wavelength, False plots over wavenumber.
    oname: string. Name of plot file. If `oname` is None, it defaults to  
                   `fname` with the extension changed to .png.
                   If it is a string, then that path/to/plotname.ext is used.
    ptitle: bool/string. Title of plot.
                   If `ptitle` is False, the plot will not have a title. 
                   If `ptitle` is True, the plot will have a title of 
                   "<testname> <geometry> Spectrum".
                   If `ptitle` is a string, the plot will have that string as 
                   the title.
    
    Outputs
    -------
    PNG file of the spectrum. If `oname` is not specified, the default 
    naming convention is used, i.e.,
      oneline_emission_spectrum.png
      fewline_transmission_spectrum.png
    
    Example
    -------
    >>> plotspectrum('fewline/fewline_emission_spectrum.dat', 'eclipse')
    """
    # Load the data
    try:
        if wl==True:
            wlength, flux = rt.readspectrum(fname, 0)
        else:
            wlength, flux = rt.readspectrum(fname)
    except:
        print("Unable to load file '" + fname + "'\n")
        return

    # Get test name
    testname = fname.split('/')[-1].split('_')[0]

    # Plot the data
    plt.figure(0, (8,5))
    plt.clf()
    plt.plot(wlength, flux, "b")
    
    # Set title and plot filename based on the geometry
    if geo=='eclipse':
        if ptitle==True:
            plt.title(testname + " Emission Spectrum")
        elif ptitle!=False:
            plt.title(ptitle)
        plt.ylabel("Flux  (erg s$^{-1}$ cm$^{-1}$)")
        plotname = testname + '_emission_spectrum.png'
    else:
        if ptitle==True:
            plt.title(testname + " Transmission Spectrum")
        elif ptitle!=False:
            plt.title(ptitle)
        plt.ylabel("Modulation  ($(R_p/R_s)^2$)")
        plotname = testname + '_transmission_spectrum.png'
    
    # Set X axis label to that specified
    if wl==True:
        plt.xlabel(u"Wavelength  (\u00b5m)")
    else:
        plt.xlabel("Wavenumber  (cm$^{-1}$)")

    # Set x limits
    plt.xlim(np.amin(wlength), np.amax(wlength))
    
    # Save the plot
    if oname==None:
        plt.savefig(fname.split('/')[0] + '/' + plotname)
    else:
        plt.savefig(oname)
    plt.clf()


def plotspeczoom(fname, geo, loc, wl=True, xlims=False, oname=None, 
                 ptitle=True):
    """
    This function produces a plot of a portion of the spectrum produced by 
    Transit.
    
    Inputs
    ------
    fname: string. File name of the spectrum file.
    geo  : string. Geometry of the produced spectrum.
                   Options: 'transit' or 'eclipse'
    loc  : float.  Location in microns (if wl=True) or inverse centimeters 
                   (if wl=False) to zoom in on.
    wl   : bool.   True plots over wavelength, False plots over wavenumber.
    xlims: tuple.  (xmin, xmax) Minimum and maximum X-axis values for the plot. 
                   Only use this if user desires a different range for the 
                   X axis than the default.
    oname: string. Name of plot file. If `oname` is None, it defaults to  
                   `fname` with the extension changed to .png.
                   If it is a string, then that path/to/plotname.ext is used.
    ptitle: bool/string. Title of plot.
                   If `ptitle` is False, the plot will not have a title. 
                   If `ptitle` is True, the plot will have a title of 
                   "<testname> <geometry> Spectrum".
                   If `ptitle` is a string, the plot will have that string as 
                   the title.
        
    Outputs
    -------
    PNG file of the portion of the spectrum. Naming convention is i.e.
      fewline_emission_spectrum_zoom2500nm.png
    for the example below, unless oname is specified.

    Example
    -------
    >>> plotspeczoom('fewline/fewline_emission_spectrum.dat', 'eclipse', 2.5)
    """
    # Load the data
    try:
        if wl==True:
            wlength, flux = rt.readspectrum(fname, 0)
            # File is ordered by decreasing wavelength--reverse it
            # See below for reason
            wlength = wlength[::-1]
            flux    = flux   [::-1]
        else:
            wlength, flux = rt.readspectrum(fname)
    except:
        print("Unable to load file '" + fname + "'\n")
        return

    # Get test name
    testname = fname.split('/')[-1].split('_')[0]
    
    # Find where to zoom in, trim data to this region
    hi       = wlength[wlength < loc]
    wlentrim = wlength[len(hi) - 33 : len(hi) + 33] # This is why we reverse 
    fluxtrim = flux   [len(hi) - 33 : len(hi) + 33] # wl above
    
    # Plot the data
    plt.figure(0, (8,5))
    plt.clf()
    plt.plot(wlentrim, fluxtrim, "b")
    
    # Set title and plot filename based on the geometry
    if geo=='eclipse':
        if ptitle==True:
            plt.title(testname + " Emission Spectrum")
        elif ptitle!=False:
            plt.title(ptitle)
        plt.ylabel("Flux  (erg s$^{-1}$ cm$^{-1}$)")
        plotname = testname + '_emission_spectrum_zoom'
    else:
        if ptitle==True:
            plt.title(testname + " Transmission Spectrum")
        elif ptitle!=False:
            plt.title(ptitle)
        plt.ylabel("Modulation  ($(R_p/R_s)^2$)")
        plotname = testname + '_transmission_spectrum_zoom'
    
    # Set X axis label to that specified
    if wl==True:
        plt.xlabel(u"Wavelength  (\u00b5m)")
        plotname += str(1000*loc)[:4] + 'nm'
    else:
        plt.xlabel("Wavenumber  (cm$^{-1}$)")
        plotname += str(loc) + 'cm-1'
    
    # Set the X axis limits for the plot
    plt.xlim(wlentrim[0], wlentrim[-1])
    
    # Save the plot
    if oname==None:
        plt.savefig(fname.split('/')[0] + '/' + plotname + '.png')
    else:
        plt.savefig(oname)
    plt.clf()


def plotspeciso(fname, atm, wl=True, oname=None, ptitle=True):
    """
    This function produces a plot of the isothermal spectrum produced by 
    the isothermal test with the Planck function overplotted.
    
    Inputs
    ------
    fname: string. File name of the spectrum file, with directory relative to 
                   /BARTTest/.
    atm  : string. File name of the atmospheric file used, with directory.
    wl   : bool.   True plots over wavelength, False plots over wavenumber.
    oname: string. Name of plot file. If `oname` is None, it defaults to  
                   `fname` with the extension changed to .png.
                   If it is a string, then that path/to/plotname.ext is used.
    ptitle: bool/string. Title of plot.
                   If `ptitle` is False, the plot will not have a title. 
                   If `ptitle` is True, the plot will have a title of 
                   "<testname> <geometry> Spectrum".
                   If `ptitle` is a string, the plot will have that string as 
                   the title.
    
    Outputs
    -------
    PNG file of the spectrum. Default naming convention is i.e.
      isothermal_emission_spectrum.png
      isothermal_transmission_spectrum.png
    
    Example
    -------
    >>> plotspeciso('isothermal/isothermal_emission_spectrum.dat', \
                    'isothermal/isothermal.atm', 'eclipse')

    Notes
    -----
    For this plot to be produced correctly, an isothermal atmospheric file must 
    be supplied. There is a check for this in the function. A message will be 
    printed to the screen, and the code will continue to run. The resulting plot
    will however not contain the overplotted Planck function.

    """
    # Get the temperatures from the atm file
    foo = open(atm, 'r')
    lines = foo.readlines()
    lines = lines[13:] # trim the first 12 lines as they are headers

    # Array to hold temps
    temparr = np.zeros(len(lines), dtype=float)

    # Read in all the temps
    for i in range(len(lines)):
        temparr[i] = lines[i].split()[2]

    # Check that they are all the same--if not, yell at the user
    if len(np.unique(temparr)) != 1:
        print("The atmospheric file supplied is not isothermal! " + \
              "Please supply an isothermal atmospheric file.\n")
        bgtemp = None
    else:
        bgtemp = np.unique(temparr)

    # Load the data
    try:
        if wl==True:
            wlength, flux = rt.readspectrum(fname, 0)
        else:
            wlength, flux = rt.readspectrum(fname)
    except:
        print("Unable to load file '" + fname + "'\n")
        return

    # Get test name
    testname = fname.split('/')[-1].split('_')[0]

    # Plot the data
    plt.figure(0, (8,5))
    plt.clf()
    plt.plot(wlength, flux, color="k", lw=2, label='Transit')
    
    # Set title and plot filename
    if ptitle==True:
        plt.title(testname + " Emission Spectrum")
    elif ptitle!=False:
        plt.title(ptitle)
    plt.ylabel("Flux  (erg s$^{-1}$ cm$^{-1}$)")
    plotname = testname + '_emission_spectrum.png'
    
    # Set X axis label to that specified
    if wl==True:
        plt.xlabel(u"Wavelength  (\u00b5m)")
    else:
        plt.xlabel("Wavenumber  (cm$^{-1}$)")
    
    # Plot the Planck function if possible
    if bgtemp!=None:
        if wl==True:
            # Convert to wavenumber
            wavenum = 10000./wlength
            # Calculate the Planck function
            planck = 2. * const.h*1e7 * (wavenum**3) * (const.c*100)**2 /   \
                     (np.exp(const.h*1e7 * wavenum * const.c*100 /          \
                     (const.k*1e7) / bgtemp) - 1)
            # Plot it. Multiply Planck by pi because of how Transit calcs flux
            # Reverse Planck to match wlength
            plt.plot(wlength, np.pi*planck, color='#ffff00', lw=2, ls="--", 
                     label='Planck')
        else:
            planck = 2. * const.h*1e7 * (wlength**3) * (const.c*100)**2 /   \
                     (np.exp(const.h*1e7 * wlength * const.c*100 /          \
                     (const.k*1e7) / bgtemp) - 1)
            plt.plot(wlength, np.pi*planck, color='#ffff00', lw=2, ls="--", 
                     label='Planck')
    
    # Save the plot
    plt.legend(loc='upper right')
    if oname==None:
        plt.savefig(fname.split('/')[0] + '/' + plotname)
    else:
        plt.savefig(oname)
    plt.clf()



def plotspecabun(fnames, base, geo='eclipse', xlims=(2.28905,2.28945), 
                 oname=None, ptitle=True):
    """
    The function produces a plot of the spectra produced in abundance.
    All spectra are plotted together to show the difference in line depth.

    Inputs
    ------
    fnames: list of strings. File names of the spectrum files.
                   [fname1, fname2, fname3, ...]
    base  : string. File name of the spectrum with the line moved.
    geo   : string. Geometry of the produced spectrum.
                   'transit' or 'eclipse'
    xlims : tuple. Minimum and maximum X-axis values to be plotted. (xmin, xmax)
                   Default corresponds to the default line used in 
                   f04abundance test.
    oname: string. Name of plot file. If `oname` is None, it defaults to  
                   `fname` with the extension changed to .png.
                   If it is a string, then that path/to/plotname.ext is used.
    ptitle: bool/string. Title of plot.
                   If `ptitle` is False, the plot will not have a title. 
                   If `ptitle` is True, the plot will have a title of 
                   "Varying Abundance of One Line, Optically Thin Regime".
                   If `ptitle` is a string, the plot will have that string as 
                   the title.

    Outputs
    -------
    PNG file of the portion of the spectrum. Naming convention is i.e.
      abundance_emission_spectra.png
    """
    # Load and plot spectrum w/ line moved
    wl, fl = rt.readspectrum(base, 0)
    plt.plot(wl, fl, label='No line', color=(0,0,0))

    # Loop over list of files
    for fn in range(len(fnames)):
        # Load data
        try:
            wlength, flux = rt.readspectrum(fnames[fn], 0)
        except:
            print("Unable to load file '" + fnames[fn] + "'\n")
            return
        col = float(fn)/float(len(fnames))
        # Plot it, with label and no repeat colors
        plt.plot(wlength, flux, label=fnames[fn].split('/')[-1].split('_')[1], \
                 color=(col, 0, 1-col))

    # Set axis limits for the plot
    plt.xlim(xlims[0], xlims[1])
    loc = np.where(fl - flux == np.amax(fl - flux))[0][0]
    plt.ylim(flux[loc] - 5, fl[loc] + 5)
    
    # Label rest of plot, save
    if ptitle==True:
        plt.title('Varying Abundance of One Line, \n Optically Thin Regime')
    elif ptitle!=False:
        plt.title(ptitle)
    plt.ylabel("Flux  (erg s$^{-1}$ cm$^{-1}$)")
    plt.xlabel(u"Wavelength  (\u00b5m)")
    plt.legend(loc="upper right")
    if oname==None:
        plt.savefig(base.split('/')[0] + '/' + 'abundance_emission_spectra.png')
    else:
        plt.savefig(oname)
    plt.clf()


def main():
    """
    This function produces plots of the spectra produced in the tests.
    By default, it is configured to do this for BART.
    To modify this for other RT codes, change `odir` and `rdir` below.
    """
    # Directory containing outputs from tests
    odir = '../code-output/01BART/'
    # Directory to save plots
    rdir = '../results/01BART/'
    
    # oneline
    try:
        plotspectrum(odir+'f01oneline/oneline_emission_spectrum.dat',       \
                     'eclipse', oname=rdir+'f01oneline_emission_spectrum.png')
    except:
        pass

    # fewline
    try:
        plotspectrum(odir+'f02fewline/fewline_emission_spectrum.dat',       \
                     'eclipse', 
                     oname=rdir+'f02fewline_emission_spectrum.png')
        plotspectrum(odir+'f02fewline/fewline_transmission_spectrum.dat',   \
                     'transit',                                             \
                     oname=rdir+'f02fewline_transmission_spectrum.png')
    except:
        pass

    # multiline
    try:
        plotspectrum(odir+'f03multiline/multiline_emission_spectrum.dat',    \
                     'eclipse',                                              \
                     oname=rdir+'f03multiline_emission_spectrum.png')
        plotspectrum(odir+'f03multiline/multiline_transmission_spectrum.dat',\
                     'transit', 
                     oname=rdir+'f03multiline_transmission_spectrum.png')
    except:
        pass

    # broadening
    try:
        plotspectrum(odir+'f04broadening/broadening_emission_spectrum.dat', \
                     'eclipse',                                             \
                     oname=rdir+'f04broadening_emission_spectrum.png')
        voigtcomp.comp()
    except:
        pass

    # abundance
    fnames = [odir+'f05abundance/abundance_1e-4_emission_spectrum.dat',
              odir+'f05abundance/abundance_2e-4_emission_spectrum.dat',
              odir+'f05abundance/abundance_3e-4_emission_spectrum.dat',
              odir+'f05abundance/abundance_4e-4_emission_spectrum.dat',
              odir+'f05abundance/abundance_5e-4_emission_spectrum.dat',
              odir+'f05abundance/abundance_6e-4_emission_spectrum.dat',
              odir+'f05abundance/abundance_7e-4_emission_spectrum.dat',
              odir+'f05abundance/abundance_8e-4_emission_spectrum.dat',
              odir+'f05abundance/abundance_9e-4_emission_spectrum.dat',
              odir+'f05abundance/abundance_1e-3_emission_spectrum.dat']
    try:
        plotspecabun(fnames, 
                     odir + 
                      'f05abundance/abundance_linemoved_emission_spectrum.dat', 
                     oname=rdir+'f05abundance_emission_spectra.png')
    except:
        pass

    # blending
    try:
        plotspectrum(odir+'f06blending/blending_emission_spectrum.dat',     \
                     'eclipse', oname=rdir+'f06blending_emission_spectrum.png')
    except:
        pass

    # multicia
    try:
        plotspectrum(odir+'f07multicia/noCIA_emission_spectrum.dat', \
                     'eclipse',                                               \
                     oname=rdir+'f07multicia_noCIA_emission_spectrum.png')
        plotspectrum(odir+'f07multicia/oneCIA_emission_spectrum.dat',\
                     'eclipse',                                               \
                     oname=rdir+'f07multicia_oneCIA_emission_spectrum.png')
        plotspectrum(odir+'f07multicia/twoCIA_emission_spectrum.dat',\
                     'eclipse',                                               \
                     oname=rdir+'f07multicia_twoCIA_emission_spectrum.png')
    except:
        pass
    
    # isothermal
    try:
        plotspeciso(odir+'f08isothermal/isothermal_emission_spectrum.dat',  \
                    '../tests/f08isothermal/isothermal.atm',                \
                    oname=rdir+'f08isothermal_emission_spectrum.png')
    except:
        pass

    


if __name__ == "__main__":
    main()

